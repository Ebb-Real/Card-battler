/* autogenerated by Processing revision 1292 on 2024-02-29 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Cardbattler extends PApplet {


GameStateManager manager;

  ControlP5 cp5;

//cards
CardBP claw, healingHands;

public void setup(){
  
  //card library
claw = new BygCard().setNavn("Claw").setMana(3).setDamage(2).build();
healingHands = new BygCard().setNavn("Healing Hands").setMana(2).setHeal(1).build();
  
  
  
  
  
  manager.tilFoejGameState("mainScreen", new mainScreen());
  manager.skiftGameState("mainScreen");
  
  

  
  
    cp5 = new ControlP5(this);
      cp5.addButton("colorA")
     .setValue(0)
     .setPosition(100,100)
     .setSize(200,19)
     ;
  
  PImage[] imgs = {loadImage("bruh2.png"),loadImage("bruh3.jpg"),loadImage("bruh4.png")};
  cp5.addButton("play")
     .setValue(128)
     .setPosition(140,300)
     .setImages(imgs)
     .updateSize()
     ;
       
  
  
  
  
  
  
  
  
  
  /* size commented out by preprocessor */;
  deck.add(1);
  deck.add(3);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(3);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(1);
  deck.add(3);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(3);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
  deck.add(7);
}

public int cardlength = 150;
public int cardheight = 300;
ArrayList deck = new ArrayList();
ArrayList hand = new ArrayList();
int handArea = width/4*3-width/4*1;

public void draw() {
  background(0,0, 255);
  if (hand.size()>0) {
    if (width/2-hand.size()*cardlength/2>width/4) {
      for (int i=0; i<=hand.size(); i++) {
        fill (255, 0, 0);
        rect(width/2-hand.size()*cardlength/2+i*cardlength-cardlength/2, height/4*3, cardlength, cardheight+width/4);
      }
    }
    else {
      for (int i=0; i<=hand.size()-1; i++) {
        fill (255, 0, 0);
        rect(width/4*2/hand.size()*i+width/4*1-cardlength/2, height/4*3, cardlength, cardheight);
      }
    }
  }
}

public void cardDraw() {
  if (deck.size()>0) {
    hand.add(deck.get(0));
    deck.remove(0);
  } else {
    mill();
  }
}
public void mill() {
  println("bruh");
}


//  cardDraw();
//  if(deck.size()>0){
//  println("deck"+deck.get(0));
//}
//  if(hand.size()>0){
//   for (int i = 0; i < hand.size(); i++) {
//  println("hand"+hand.get(i));
//}
//}



public void controlEvent(ControlEvent theEvent) {
  println(theEvent.getController().getName());
}

// function colorA will receive changes from 
// controller with name colorA
public void colorA() {
  println("a button event from colorA: ");
}

// function colorB will receive changes from 
// controller with name colorB
public void colorB() {
  println("a button event from colorB: ");
}

// function colorC will receive changes from 
// controller with name colorC
public void play() {
  println("a button event from colorC: ");
  cardDraw();
}
interface builder{
  //musts
  builder setNavn(String name);
  builder setMana(int mana);
  builder Minion(boolean minion);
  
  //if monster
  builder setPower(int p);
  builder setHealth(int h);
  
  //if spell
  builder setDamage(int d);
  builder setHeal(int h);
  CardBP build();
}
//int mana=
//int health=
//int attack=
//class Card {


//}
class CardBP{
   String navn;
   int mana; 
   boolean minion;
   int power;
   int health;
   int damage;
   int heal;
   float posX;
   float posY;
}
Boolean mainScreen;
class GameStateManager {
  HashMap<String, GameState> gameStates;
  GameState currentGameState = null;

  GameStateManager() {
    gameStates = new HashMap<String, GameState>();
  }

  public void tilFoejGameState(String name, GameState state) {
    gameStates.put(name, state);
  }

  public void skiftGameState(String name) {
    currentGameState = gameStates.get(name);
  }

  public void draw() {
    currentGameState.draw();
  }
}

class Mana {
  int maxMana;
  int startingMana;
  int addedManaPerRound;
  PImage manacrystal;
  
  Mana(int maxManaInput, int startingManaInput, int addedManaPerRoundInput) {
    int maxMana = maxManaInput;
    int startingMana = startingManaInput;
    int addedManaPerRound = addedManaPerRoundInput;
    manacrystal = loadImage("manacrystal.jpg");
  }
  
  public void draw(){
    
  }
}

class BygCard implements builder {
  CardBP Card;

  BygCard() {
    Card = new CardBP();
  }

  public BygCard setNavn(String n) {
    Card.navn = n;
    return this;
  }
  
  public BygCard setMana(int m) {
    Card.mana = m;
    return this;
  }
  
  public BygCard Minion(boolean m) {
    Card.minion = m;
    return this;
  }
  
  //Minion
  public BygCard setHealth(int h) {
    Card.health = h;
    return this;
  }
  
  public BygCard setPower(int a) {
    Card.power = a;
    return this;
  }
  
  //spell
  public BygCard setDamage(int d) {
    Card.damage = d;
    return this;
  }
  
  public BygCard setHeal(int ha) {
    Card.heal = ha;
    return this;
  }
  
  public CardBP build() {
    return Card;
  }
}
  int moonSelector=0;
class GameState {
  int xpos=125;
  int ypos=50;
  float buttonwidth=100;
  float buttonheight=100;
  int scale=4;

  public void update() {
  }

  public void musKlikked() {
  }

  public void draw() {
  }
  
  
  //Lave om sÃ¥ det kan bruges med GUI lib ControlP5
    public void returnbutton() {
    PImage img=loadImage("bruh.png");
    buttonheight=img.height/scale;
    buttonwidth=img.width/scale;
    img.resize(img.width/scale, img.height/scale);
    image(img, xpos, ypos);
    noFill();
    if (mouseX > xpos-buttonwidth/2 && mouseX < xpos + buttonwidth/2 && mouseY > ypos-buttonheight/2 && mouseY < ypos+buttonheight/2 && mousePressed) {
      mainScreen =! mainScreen;
      manager.skiftGameState("mainScreen");
    }
    
    }
}
class mainScreen extends GameState {
  
  //Tilpasses med controlP5

  public void skiftSkaerm(String s) {
    manager.skiftGameState(s);
  }
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Cardbattler" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
