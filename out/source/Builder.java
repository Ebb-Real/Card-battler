/* autogenerated by Processing revision 1292 on 2024-02-29 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Builder extends PApplet {

  public void setup() {
interface Builder{
  //musts
  Builder setNavn(String name);
  Builder setMana(int mana);
  Builder Minion(boolean minion);
  
  //if monster
  Builder setPower(int p);
  Builder setHealth(int h);
  
  //if spell
  Builder setDamage(int d);
  Builder setHeal(int h);
  CardBP build();
}
//int mana=
//int health=
//int attack=
//class Card {









//}
class CardBP{
   String navn;
   int mana; 
   boolean minion;
   int power;
   int health;
   int damage;
   int heal;
   float posX;
   float posY;
}
Boolean mainScreen;
class GameStateManager {
  HashMap<String, GameState> gameStates;
  GameState currentGameState = null;

  GameStateManager() {
    gameStates = new HashMap<String, GameState>();
  }

  public void tilFoejGameState(String name, GameState state) {
    gameStates.put(name, state);
  }

  public void skiftGameState(String name) {
    currentGameState = gameStates.get(name);
  }

  public void draw() {
    currentGameState.draw();
  }
}

class Mana {
  int maxMana;
  int startingMana;
  int addedManaPerRound;
  PImage manacrystal;
  
  Mana(int maxManaInput, int startingManaInput, int addedManaPerRoundInput) {
    int maxMana = maxManaInput;
    int startingMana = startingManaInput;
    int addedManaPerRound = addedManaPerRoundInput;
    manacrystal = loadImage("manacrystal.jpg");
  }
  
  public void draw(){
    
  }
}

class BygCard implements Builder {
  CardBP Card;

  BygCard() {
    Card = new CardBP();
  }

  public BygCard setNavn(String n) {
    Card.navn = n;
    return this;
  }
  
  public BygCard setMana(int m) {
    Card.mana = m;
    return this;
  }
  
  public BygCard Minion(boolean m) {
    Card.minion = m;
    return this;
  }
  
  //Minion
  public BygCard setHealth(int h) {
    Card.health = h;
    return this;
  }
  
  public BygCard setPower(int a) {
    Card.power = a;
    return this;
  }
  
  //spell
  public BygCard setDamage(int d) {
    Card.damage = d;
    return this;
  }
  
  public BygCard setHeal(int ha) {
    Card.heal = ha;
    return this;
  }
  
  public CardBP build() {
    return Card;
  }
}
  int moonSelector=0;
class GameState {
  int xpos=125;
  int ypos=50;
  float buttonwidth=100;
  float buttonheight=100;
  int scale=4;

  public void update() {
  }

  public void musKlikked() {
  }

  public void draw() {
  }
  
  
  //Lave om sÃ¥ det kan bruges med GUI lib ControlP5
    public void returnbutton() {
    PImage img=loadImage("bruh.png");
    buttonheight=img.height/scale;
    buttonwidth=img.width/scale;
    img.resize(img.width/scale, img.height/scale);
    image(img, xpos, ypos);
    noFill();
    if (mouseX > xpos-buttonwidth/2 && mouseX < xpos + buttonwidth/2 && mouseY > ypos-buttonheight/2 && mouseY < ypos+buttonheight/2 && mousePressed) {
      mainScreen =! mainScreen;
      manager.skiftGameState("mainScreen");
    }
    
    }
}
class mainScreen extends GameState {
  
  //Tilpasses med controlP5

  public void skiftSkaerm(String s) {
    manager.skiftGameState(s);
  }
}

    noLoop();
  }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Builder" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
